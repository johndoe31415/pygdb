#!/usr/bin/env python3
#	pygdb - Python GDB convenience frontend
#	Copyright (C) 2020-2020 Johannes Bauer
#
#	This file is part of pygdb.
#
#	pygdb is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pygdb is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with pygdb; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import subprocess
import json
import tempfile
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Run program under GDB with the pygdb extensions.")
parser.add_argument("--gdb", metavar = "path", type = str, default = "gdb", help = "gdb binary to use. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("runfile", metavar = "runfile", type = str, help = "JSON config file that specifies program to be debugged")
args = parser.parse_args(sys.argv[1:])

with open(args.runfile) as f:
	config = json.load(f)

pygdb_path = os.path.dirname(os.path.realpath(__file__))
if not pygdb_path.endswith("/"):
		pygdb_path += "/"

with tempfile.NamedTemporaryFile(mode = "w", prefix = "pygdb_", suffix = ".gdb") as f:
	for filename in [ "HexDump.py", "Tools.py", "PyGDB.py" ]:
		print("source %s%s" % (pygdb_path, filename), file = f)
	for filename in config.get("load", [ ]):
		print("source %s" % (filename), file = f)

	for breakpoint in config.get("break"):
		print("set breakpoint pending on", file = f)
		if not breakpoint.get("enabled", True):
			continue
		print("b %s" % (breakpoint["on"]), file = f)
		if "execute" in breakpoint:
			print("commands", file = f)
			for command in breakpoint["execute"]:
				if not command.startswith("#"):
					print("%s" % (command), file = f)
			print("end", file = f)

	if config.get("run"):
		print("run", file = f)
	f.flush()

	if args.verbose >= 1:
		with open(f.name) as f:
			print(f.read())

	env = dict(os.environ)
	new_env = config.get("env", { })
	new_env["PYGDB_RUNFILE"] = args.runfile
	env.update(new_env)

	cmd = [ ]
	cmd += [ args.gdb ]
	cmd += [ "--quiet" ]
	cmd += [ "-x", f.name ]
	cmd += [ "--args" ]
	cmd += [ config["inferior"] ]
	if "args" in config:
		cmd += config["args"]
	subprocess.call(cmd, env = env)
